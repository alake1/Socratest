[{"question": "What is the primary purpose of a Kubernetes Pod?", "options": ["To manage and schedule Kubernetes deployments", "To provide a network interface for containerized applications", "To run a single container or a group of related containers", "To store persistent data for Kubernetes applications"], "correctOption": 2, "explanation": "A Pod represents the smallest deployable unit in Kubernetes, encapsulating one or more containers with shared resources and networking."}, {"question": "Which Kubernetes component is responsible for scheduling Pods to nodes?", "options": ["Kubelet", "etcd", "kubectl", "Scheduler"], "correctOption": 3, "explanation": "The Kubernetes Scheduler analyzes available resources, constraints, and Pod specifications to determine the most suitable node for running each Pod."}, {"question": "What is the purpose of a Kubernetes Deployment?", "options": ["To define the desired state of a set of Pods", "To manage network traffic between Pods", "To store application configuration files", "To monitor the health of Kubernetes nodes"], "correctOption": 0, "explanation": "A Deployment defines the desired number of replicas for a Pod template, ensuring that the desired number of Pods are running and automatically managing updates and rollbacks."}, {"question": "What is the difference between a Kubernetes Service and a Deployment?", "options": ["Services define the network access for Pods, while Deployments define the desired state of Pods", "Services manage persistent storage, while Deployments manage application configurations", "Services provide logging and monitoring, while Deployments handle security policies", "Services are used for scheduling, while Deployments are used for container management"], "correctOption": 0, "explanation": "Services provide a stable network interface for Pods, enabling external access and load balancing. Deployments focus on managing the number and configuration of Pods."}, {"question": "Which Kubernetes component is responsible for managing the cluster's state and configuration?", "options": ["Kubelet", "etcd", "kubectl", "Scheduler"], "correctOption": 1, "explanation": "etcd is a distributed key-value store that acts as the central brain of a Kubernetes cluster, storing all configuration data and cluster state information."}, {"question": "What is the purpose of a Kubernetes Namespace?", "options": ["To isolate and organize resources within a cluster", "To define security policies for network traffic", "To manage storage for persistent volumes", "To schedule Pods to specific nodes"], "correctOption": 0, "explanation": "Namespaces provide a logical way to divide a Kubernetes cluster into smaller, independent units, allowing for better organization and resource isolation."}, {"question": "What is a Kubernetes Ingress?", "options": ["A mechanism for routing external traffic to Services within the cluster", "A way to manage network traffic between Pods", "A tool for monitoring the health of Kubernetes nodes", "A way to define security policies for network traffic"], "correctOption": 0, "explanation": "An Ingress acts as a reverse proxy for external traffic, enabling access to Services within the cluster based on rules defined in the Ingress resource."}, {"question": "What is the purpose of a Kubernetes ConfigMap?", "options": ["To store sensitive data like passwords and API keys", "To define configuration values for applications", "To manage network traffic between Pods", "To schedule Pods to specific nodes"], "correctOption": 1, "explanation": "ConfigMaps allow you to store application configuration data as key-value pairs, making it easier to manage and update configuration without modifying container images."}, {"question": "Which of the following is NOT a core Kubernetes concept?", "options": ["Pod", "Deployment", "Service", "Dockerfile"], "correctOption": 3, "explanation": "Dockerfiles are used for building container images, but they are not a core concept within Kubernetes. Kubernetes works with container images created using Docker or other containerization tools."}, {"question": "What is the primary purpose of a Kubernetes Secret?", "options": ["To store sensitive data like passwords and API keys", "To define network access for Pods", "To manage persistent storage for applications", "To schedule Pods to specific nodes"], "correctOption": 0, "explanation": "Secrets allow you to store sensitive data securely within a Kubernetes cluster, making it accessible to applications without exposing the sensitive data directly in configuration files."}, {"question": "Which Kubernetes resource is responsible for defining the desired state of a group of Pods and managing their updates?", "options": ["Service", "Deployment", "Namespace", "ConfigMap"], "correctOption": 1, "explanation": "A Deployment defines the desired number of replicas for a Pod template, handles updates, rollbacks, and ensures that the desired number of Pods are always running."}, {"question": "What is the primary function of a Kubernetes Ingress controller?", "options": ["Scheduling Pods to nodes based on resource availability.", "Managing persistent storage volumes for applications.", "Routing external HTTP traffic to services within a cluster.", "Monitoring the health of Kubernetes nodes and reporting failures."], "correctOption": 2, "explanation": "An Ingress controller acts as a reverse proxy, enabling external access to services within the cluster based on rules defined in Ingress resources."}, {"question": "Which Kubernetes resource allows you to define network policies to control communication between Pods?", "options": ["Deployment", "Service", "NetworkPolicy", "Ingress"], "correctOption": 2, "explanation": "NetworkPolicies define rules to control traffic flow between Pods, including ingress (incoming traffic) and egress (outgoing traffic)."}, {"question": "What is the difference between a StatefulSet and a Deployment in Kubernetes?", "options": ["StatefulSets manage stateless applications, while Deployments manage stateful applications.", "StatefulSets provide persistent storage and unique network identities for Pods, while Deployments are stateless.", "StatefulSets are used for scheduling Pods, while Deployments are used for managing application updates.", "StatefulSets define network policies, while Deployments define access control lists."], "correctOption": 1, "explanation": "StatefulSets are designed for stateful applications that require persistent storage and unique network identities for Pods, while Deployments are stateless and ideal for applications that can be replicated without preserving state."}, {"question": "What is the purpose of a Kubernetes Job?", "options": ["To manage long-running processes and background tasks.", "To define the desired state of a group of Pods.", "To control network traffic between Pods.", "To store sensitive data like passwords and API keys."], "correctOption": 0, "explanation": "Jobs are used to run one-off tasks or batch jobs that complete in a finite amount of time, like data processing or data backups."}, {"question": "Which of the following is a common Kubernetes monitoring tool?", "options": ["kubectl", "etcd", "Prometheus", "Docker"], "correctOption": 2, "explanation": "Prometheus is a popular open-source monitoring and alerting system often used for monitoring Kubernetes clusters and applications."}, {"question": "What is the purpose of a Kubernetes DaemonSet?", "options": ["To schedule Pods to specific nodes based on node labels.", "To ensure that a specific Pod is running on every node in a cluster.", "To define the desired state of a group of Pods.", "To manage persistent storage for applications."], "correctOption": 1, "explanation": "A DaemonSet ensures that a specific Pod is running on every node in the cluster, making it suitable for tasks like system monitoring or log collection."}, {"question": "Which Kubernetes resource allows you to define a set of rules for managing access to resources within the cluster?", "options": ["Deployment", "RoleBinding", "NetworkPolicy", "Service"], "correctOption": 1, "explanation": "RoleBindings grant specific permissions to users or service accounts based on the roles they have been assigned. They are used for controlling access to resources like Pods, services, and deployments."}, {"question": "What is the purpose of a Kubernetes Horizontal Pod Autoscaler (HPA)?", "options": ["To automatically scale the number of Pods in a Deployment based on resource utilization or other metrics.", "To manage persistent storage for applications.", "To route external traffic to services within a cluster.", "To monitor the health of Kubernetes nodes and report failures."], "correctOption": 0, "explanation": "An HPA monitors resource utilization or other metrics and automatically scales the number of Pods in a Deployment up or down to maintain desired performance levels."}, {"question": "What is the difference between a Kubernetes Pod and a Node?", "options": ["Pods are physical machines, while Nodes are logical units within a cluster.", "Pods represent a group of related containers, while Nodes are physical machines or virtual machines that host Pods.", "Pods manage persistent storage, while Nodes schedule Pods to specific nodes.", "Pods define network policies, while Nodes provide network connectivity for Pods."], "correctOption": 1, "explanation": "Pods are the smallest deployable units in Kubernetes, running one or more containers. Nodes are physical or virtual machines that host Pods and provide resources like CPU, memory, and storage."}]